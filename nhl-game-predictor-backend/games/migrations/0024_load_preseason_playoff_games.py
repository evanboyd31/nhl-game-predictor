# Generated by Django 5.1.2 on 2025-06-20 23:39

from django.db import migrations
from datetime import timedelta
from django.utils import timezone
import httpx

Game = None
Season = None

def daterange(start_date, end_date):
  """
  Yields each date from start_date (inclusive) to end_date (exclusive)
  as timezone-aware `datetime.date` objects.
  """
  for n in range((end_date - start_date).days):
    yield start_date + timedelta(days=n)

def get_previous_season_id(season_id: int) -> int:
  """
  given a season ID like 20232024, return the previous season ID, e.g., 20222023.
  """
  start_year = int(str(season_id)[:4])
  prev_start_year = start_year - 1
  prev_end_year = start_year
  return int(f"{prev_start_year}{prev_end_year}")

def load_preseason_games(apps, season_id):
  Game = apps.get_model('games', 'Game')
  Season = apps.get_model('games', 'Season')

  season = Season.objects.filter(id=season_id).first()
  prev_season_id = get_previous_season_id(season_id=season_id)
  prev_season = Season.objects.filter(id=prev_season_id).first()
  
  prev_season_end = prev_season.regular_season_end
  season_start = season.regular_season_start

  all_dates = list(daterange(prev_season_end, season_start))
  print(all_dates)


def load_playoff_games(apps, season_id):
  pass

def load_preseason_playoff_games(apps, schema_editor):

  season_ids = [
      20222023,
      20232024,
      20242025
  ]

  for season_id in season_ids:
    load_preseason_games(apps, season_id=season_id)
    # load_playoff_games(season_id=season_id)

class Migration(migrations.Migration):

    dependencies = [
        ('games', '0023_rename_regularseasonend_season_regular_season_end_and_more'),
    ]

    operations = [
        migrations.RunPython(load_preseason_playoff_games)
    ]
