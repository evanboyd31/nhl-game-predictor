# Generated by Django 5.1.2 on 2025-06-20 23:39

from django.db import migrations
from datetime import timedelta
from django.utils import timezone
from ..data_loader import convert_game_json_to_game_data_objects
import httpx

Game = None
Season = None

def daterange(start_date, end_date):
  """
  Yields each date from start_date (inclusive) to end_date (exclusive)
  as timezone-aware `datetime.date` objects.
  """
  for n in range((end_date - start_date).days):
    yield start_date + timedelta(days=n)

def get_previous_season_id(season_id: int) -> int:
  """
  given a season ID like 20232024, return the previous season ID, e.g., 20222023.
  """
  start_year = int(str(season_id)[:4])
  prev_start_year = start_year - 1
  prev_end_year = start_year
  return int(f"{prev_start_year}{prev_end_year}")

def get_next_season_id(season_id: int) -> int:
  """
  given a season ID like 20232024, return the next season ID, e.g., 20242025.
  """
  start_year = int(str(season_id)[:4])
  next_start_year = start_year + 1
  next_end_year = next_start_year + 1
  return int(f"{next_start_year}{next_end_year}")

def load_preseason_games(apps, season_id):
  Game = apps.get_model('games', 'Game')
  Season = apps.get_model('games', 'Season')

  season = Season.objects.filter(id=season_id).first()
  prev_season_id = get_previous_season_id(season_id=season_id)
  prev_season = Season.objects.filter(id=prev_season_id).first()
  
  prev_season_end = prev_season.regular_season_end
  season_start = season.regular_season_start

  all_dates = list(daterange(prev_season_end, season_start))

  games_to_create = []
  
  for date in all_dates:
    date_string = date.strftime("%Y-%m-%d")
    schedule_url = f"https://api-web.nhle.com/v1/schedule/{date_string}"
    schedule_response = httpx.get(schedule_url)
    response_json = schedule_response.json()
    games_for_date_json = response_json.get("gameWeek")[0].get("games", [])

    # iterate over all games
    for game_json in games_for_date_json:
        game_type = game_json.get("gameType")
        if game_type == 1:
          game, _, _ = convert_game_json_to_game_data_objects(game_json=game_json,
                                                              date_string=date_string,
                                                              get_team_data=False)
          if game is not None:
              games_to_create.append(game)

  Game.objects.bulk_create(games_to_create)


def load_playoff_games(apps, season_id):
  Game = apps.get_model('games', 'Game')
  Season = apps.get_model('games', 'Season')

  season = Season.objects.filter(id=season_id).first()
  next_season_id = get_next_season_id(season_id=season_id)
  next_season = Season.objects.filter(id=next_season_id).first()
  
  season_end = season.regular_season_end
  # if the next season doesn't yet exist, assume it starts 1 year in the future from the current season
  next_season_start = next_season.regular_season_start if next_season is not None else season.regular_season_start + timedelta(years=1)

  all_dates = list(daterange(season_end, next_season_start))

  games_to_create = []
  
  for date in all_dates:
    date_string = date.strftime("%Y-%m-%d")
    schedule_url = f"https://api-web.nhle.com/v1/schedule/{date_string}"
    schedule_response = httpx.get(schedule_url)
    response_json = schedule_response.json()
    games_for_date_json = response_json.get("gameWeek")[0].get("games", [])

    # iterate over all games
    for game_json in games_for_date_json:
        game_type = game_json.get("gameType")
        if game_type == 3:
          game, _, _ = convert_game_json_to_game_data_objects(game_json=game_json,
                                                              date_string=date_string,
                                                              get_team_data=False)
          if game is not None:
              games_to_create.append(game)

  Game.objects.bulk_create(games_to_create)

def load_preseason_playoff_games(apps, schema_editor):

  season_ids = [
      20222023,
      20232024,
      20242025
  ]

  for season_id in season_ids:
    load_preseason_games(apps, season_id=season_id)
    load_playoff_games(apps, season_id=season_id)

class Migration(migrations.Migration):

    dependencies = [
        ('games', '0024_alter_game_unique_together'),
    ]

    operations = [
        migrations.RunPython(load_preseason_playoff_games)
    ]
